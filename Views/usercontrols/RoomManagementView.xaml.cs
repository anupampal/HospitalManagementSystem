using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;

namespace HospitalManagementSystem.Views.UserControls
{
    /// <summary>
    /// Interaction logic for RoomManagementView.xaml
    /// </summary>
    public partial class RoomManagementView : UserControl
    {
        // TODO: **CRITICAL: Replace this with your actual database connection string.**
        private readonly string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=HMSDatabase;Integrated Security=True";

        /// <summary>
        /// A data model for a room.
        /// </summary>
        public class Room
        {
            public int RoomID { get; set; }
            public int DepartmentID { get; set; }
            public string RoomNumber { get; set; }
            public string RoomType { get; set; }
            public int Capacity { get; set; }
            public string Equipment { get; set; }
            public string Status { get; set; }
            public int Floor { get; set; }
            public string Description { get; set; }
            public bool IsActive { get; set; }
            public DateTime CreatedDate { get; set; }
        }

        // An ObservableCollection for the rooms, which automatically updates the UI.
        public ObservableCollection<Room> Rooms { get; set; }

        public RoomManagementView()
        {
            InitializeComponent();
            Rooms = new ObservableCollection<Room>();

            // Set the DataContext to this instance to enable XAML binding.
            this.DataContext = this;

            // Load rooms when the view is initialized.
            LoadRoomsFromDatabase();
        }

        /// <summary>
        /// Loads room data from the database.
        /// </summary>
        private async void LoadRoomsFromDatabase()
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    await connection.OpenAsync();
                    string sqlQuery = "SELECT RoomID, DepartmentID, RoomNumber, RoomType, Capacity, Equipment, Status, Floor, Description, IsActive, CreatedDate FROM Rooms";
                    using (SqlCommand command = new SqlCommand(sqlQuery, connection))
                    {
                        using (SqlDataReader reader = await command.ExecuteReaderAsync())
                        {
                            Rooms.Clear();
                            while (await reader.ReadAsync())
                            {
                                var room = new Room
                                {
                                    RoomID = reader.GetInt32(0),
                                    DepartmentID = reader.GetInt32(1),
                                    RoomNumber = reader.GetString(2),
                                    RoomType = reader.GetString(3),
                                    Capacity = reader.GetInt32(4),
                                    Equipment = reader.GetString(5),
                                    Status = reader.GetString(6),
                                    Floor = reader.GetInt32(7),
                                    Description = reader.GetString(8),
                                    IsActive = reader.GetBoolean(9),
                                    CreatedDate = reader.GetDateTime(10)
                                };
                                Rooms.Add(room);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show($"A database error occurred: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to load rooms: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Add Room" button.
        /// </summary>
        private async void btnAddRoom_Click(object sender, RoutedEventArgs e)
        {
            // TODO: Add input validation
            var newRoom = new Room
            {
                // RoomID is typically auto-generated by the database
                DepartmentID = int.Parse(txtDepartmentID.Text),
                RoomNumber = txtRoomNumber.Text,
                RoomType = cmbRoomType.Text,
                Capacity = int.Parse(txtCapacity.Text),
                Equipment = txtEquipment.Text,
                Status = txtStatus.Text,
                Floor = int.Parse(txtFloor.Text),
                Description = txtDescription.Text,
                IsActive = chkIsActive.IsChecked ?? false,
                CreatedDate = DateTime.Now
            };

            try
            {
                await AddRoomToDatabase(newRoom);
                Rooms.Add(newRoom); // Add to ObservableCollection for UI update
                MessageBox.Show($"Room '{newRoom.RoomNumber}' added successfully.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred while adding the room: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        /// <summary>
        /// Handles the click event for the "Update Room" button.
        /// </summary>
        private async void btnUpdateRoom_Click(object sender, RoutedEventArgs e)
        {
            if (RoomsDataGrid.SelectedItem is Room selectedRoom)
            {
                // TODO: Update the selectedRoom object with values from your UI controls.
                selectedRoom.RoomNumber = txtRoomNumber.Text;
                selectedRoom.RoomType = cmbRoomType.Text;
                selectedRoom.Capacity = int.Parse(txtCapacity.Text);
                selectedRoom.Equipment = txtEquipment.Text;
                selectedRoom.Status = txtStatus.Text;
                selectedRoom.Floor = int.Parse(txtFloor.Text);
                selectedRoom.Description = txtDescription.Text;
                selectedRoom.IsActive = chkIsActive.IsChecked ?? false;

                try
                {
                    await UpdateRoomInDatabase(selectedRoom);
                    MessageBox.Show($"Room '{selectedRoom.RoomNumber}' has been updated.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred while updating the room: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please select a room to update.", "No Room Selected", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Handles the click event for the "Delete Room" button.
        /// </summary>
        private async void btnDeleteRoom_Click(object sender, RoutedEventArgs e)
        {
            if (RoomsDataGrid.SelectedItem is Room selectedRoom)
            {
                try
                {
                    await DeleteRoomFromDatabase(selectedRoom);
                    Rooms.Remove(selectedRoom);
                    MessageBox.Show($"Room '{selectedRoom.RoomNumber}' has been deleted.", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"An error occurred while deleting the room: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show("Please select a room to delete.", "No Room Selected", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        /// <summary>
        /// Adds a room to the database.
        /// </summary>
        private async Task AddRoomToDatabase(Room room)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                string sql = "INSERT INTO Rooms (DepartmentID, RoomNumber, RoomType, Capacity, Equipment, Status, Floor, Description, IsActive, CreatedDate) VALUES (@DepartmentID, @RoomNumber, @RoomType, @Capacity, @Equipment, @Status, @Floor, @Description, @IsActive, @CreatedDate)";
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.AddWithValue("@DepartmentID", room.DepartmentID);
                    command.Parameters.AddWithValue("@RoomNumber", room.RoomNumber);
                    command.Parameters.AddWithValue("@RoomType", room.RoomType);
                    command.Parameters.AddWithValue("@Capacity", room.Capacity);
                    command.Parameters.AddWithValue("@Equipment", room.Equipment);
                    command.Parameters.AddWithValue("@Status", room.Status);
                    command.Parameters.AddWithValue("@Floor", room.Floor);
                    command.Parameters.AddWithValue("@Description", room.Description);
                    command.Parameters.AddWithValue("@IsActive", room.IsActive);
                    command.Parameters.AddWithValue("@CreatedDate", room.CreatedDate);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }

        /// <summary>
        /// Updates a room in the database.
        /// </summary>
        private async Task UpdateRoomInDatabase(Room room)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                string sql = "UPDATE Rooms SET DepartmentID = @DepartmentID, RoomNumber = @RoomNumber, RoomType = @RoomType, Capacity = @Capacity, Equipment = @Equipment, Status = @Status, Floor = @Floor, Description = @Description, IsActive = @IsActive WHERE RoomID = @RoomID";
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.AddWithValue("@DepartmentID", room.DepartmentID);
                    command.Parameters.AddWithValue("@RoomNumber", room.RoomNumber);
                    command.Parameters.AddWithValue("@RoomType", room.RoomType);
                    command.Parameters.AddWithValue("@Capacity", room.Capacity);
                    command.Parameters.AddWithValue("@Equipment", room.Equipment);
                    command.Parameters.AddWithValue("@Status", room.Status);
                    command.Parameters.AddWithValue("@Floor", room.Floor);
                    command.Parameters.AddWithValue("@Description", room.Description);
                    command.Parameters.AddWithValue("@IsActive", room.IsActive);
                    command.Parameters.AddWithValue("@RoomID", room.RoomID);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }

        /// <summary>
        /// Deletes a room from the database.
        /// </summary>
        private async Task DeleteRoomFromDatabase(Room room)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();
                string sql = "DELETE FROM Rooms WHERE RoomID = @RoomID";
                using (SqlCommand command = new SqlCommand(sql, connection))
                {
                    command.Parameters.AddWithValue("@RoomID", room.RoomID);
                    await command.ExecuteNonQueryAsync();
                }
            }
        }
    }
}
